// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_HEAPS_H_
#define FLATBUFFERS_GENERATED_HEAPS_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 23 &&
              FLATBUFFERS_VERSION_MINOR == 5 &&
              FLATBUFFERS_VERSION_REVISION == 26,
             "Non-compatible flatbuffers version included");

struct Heapinfo;
struct HeapinfoBuilder;
struct HeapinfoT;

struct Player;
struct PlayerBuilder;
struct PlayerT;

struct HeapinfoT : public ::flatbuffers::NativeTable {
  typedef Heapinfo TableType;
  uint64_t idx = 0;
  std::string heap{};
};

struct Heapinfo FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef HeapinfoT NativeTableType;
  typedef HeapinfoBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_IDX = 4,
    VT_HEAP = 6
  };
  uint64_t idx() const {
    return GetField<uint64_t>(VT_IDX, 0);
  }
  const ::flatbuffers::String *heap() const {
    return GetPointer<const ::flatbuffers::String *>(VT_HEAP);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_IDX, 8) &&
           VerifyOffset(verifier, VT_HEAP) &&
           verifier.VerifyString(heap()) &&
           verifier.EndTable();
  }
  HeapinfoT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(HeapinfoT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Heapinfo> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HeapinfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct HeapinfoBuilder {
  typedef Heapinfo Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_idx(uint64_t idx) {
    fbb_.AddElement<uint64_t>(Heapinfo::VT_IDX, idx, 0);
  }
  void add_heap(::flatbuffers::Offset<::flatbuffers::String> heap) {
    fbb_.AddOffset(Heapinfo::VT_HEAP, heap);
  }
  explicit HeapinfoBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Heapinfo> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Heapinfo>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Heapinfo> CreateHeapinfo(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t idx = 0,
    ::flatbuffers::Offset<::flatbuffers::String> heap = 0) {
  HeapinfoBuilder builder_(_fbb);
  builder_.add_idx(idx);
  builder_.add_heap(heap);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Heapinfo> CreateHeapinfoDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t idx = 0,
    const char *heap = nullptr) {
  auto heap__ = heap ? _fbb.CreateString(heap) : 0;
  return CreateHeapinfo(
      _fbb,
      idx,
      heap__);
}

::flatbuffers::Offset<Heapinfo> CreateHeapinfo(::flatbuffers::FlatBufferBuilder &_fbb, const HeapinfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct PlayerT : public ::flatbuffers::NativeTable {
  typedef Player TableType;
  std::string operation{};
  uint64_t vectoridx = 0;
  uint64_t create_size = 0;
  std::vector<std::unique_ptr<HeapinfoT>> vec{};
  PlayerT() = default;
  PlayerT(const PlayerT &o);
  PlayerT(PlayerT&&) FLATBUFFERS_NOEXCEPT = default;
  PlayerT &operator=(PlayerT o) FLATBUFFERS_NOEXCEPT;
};

struct Player FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PlayerT NativeTableType;
  typedef PlayerBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OPERATION = 4,
    VT_VECTORIDX = 6,
    VT_CREATE_SIZE = 8,
    VT_VEC = 10
  };
  const ::flatbuffers::String *operation() const {
    return GetPointer<const ::flatbuffers::String *>(VT_OPERATION);
  }
  uint64_t vectoridx() const {
    return GetField<uint64_t>(VT_VECTORIDX, 0);
  }
  uint64_t create_size() const {
    return GetField<uint64_t>(VT_CREATE_SIZE, 0);
  }
  const ::flatbuffers::Vector<::flatbuffers::Offset<Heapinfo>> *vec() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Heapinfo>> *>(VT_VEC);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OPERATION) &&
           verifier.VerifyString(operation()) &&
           VerifyField<uint64_t>(verifier, VT_VECTORIDX, 8) &&
           VerifyField<uint64_t>(verifier, VT_CREATE_SIZE, 8) &&
           VerifyOffset(verifier, VT_VEC) &&
           verifier.VerifyVector(vec()) &&
           verifier.VerifyVectorOfTables(vec()) &&
           verifier.EndTable();
  }
  PlayerT *UnPack(const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(PlayerT *_o, const ::flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static ::flatbuffers::Offset<Player> Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PlayerT* _o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct PlayerBuilder {
  typedef Player Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_operation(::flatbuffers::Offset<::flatbuffers::String> operation) {
    fbb_.AddOffset(Player::VT_OPERATION, operation);
  }
  void add_vectoridx(uint64_t vectoridx) {
    fbb_.AddElement<uint64_t>(Player::VT_VECTORIDX, vectoridx, 0);
  }
  void add_create_size(uint64_t create_size) {
    fbb_.AddElement<uint64_t>(Player::VT_CREATE_SIZE, create_size, 0);
  }
  void add_vec(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Heapinfo>>> vec) {
    fbb_.AddOffset(Player::VT_VEC, vec);
  }
  explicit PlayerBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<Player> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<Player>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<Player> CreatePlayer(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::String> operation = 0,
    uint64_t vectoridx = 0,
    uint64_t create_size = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Heapinfo>>> vec = 0) {
  PlayerBuilder builder_(_fbb);
  builder_.add_create_size(create_size);
  builder_.add_vectoridx(vectoridx);
  builder_.add_vec(vec);
  builder_.add_operation(operation);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<Player> CreatePlayerDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const char *operation = nullptr,
    uint64_t vectoridx = 0,
    uint64_t create_size = 0,
    const std::vector<::flatbuffers::Offset<Heapinfo>> *vec = nullptr) {
  auto operation__ = operation ? _fbb.CreateString(operation) : 0;
  auto vec__ = vec ? _fbb.CreateVector<::flatbuffers::Offset<Heapinfo>>(*vec) : 0;
  return CreatePlayer(
      _fbb,
      operation__,
      vectoridx,
      create_size,
      vec__);
}

::flatbuffers::Offset<Player> CreatePlayer(::flatbuffers::FlatBufferBuilder &_fbb, const PlayerT *_o, const ::flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline HeapinfoT *Heapinfo::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<HeapinfoT>(new HeapinfoT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Heapinfo::UnPackTo(HeapinfoT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = idx(); _o->idx = _e; }
  { auto _e = heap(); if (_e) _o->heap = _e->str(); }
}

inline ::flatbuffers::Offset<Heapinfo> Heapinfo::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const HeapinfoT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreateHeapinfo(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Heapinfo> CreateHeapinfo(::flatbuffers::FlatBufferBuilder &_fbb, const HeapinfoT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const HeapinfoT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _idx = _o->idx;
  auto _heap = _o->heap.empty() ? 0 : _fbb.CreateString(_o->heap);
  return CreateHeapinfo(
      _fbb,
      _idx,
      _heap);
}

inline PlayerT::PlayerT(const PlayerT &o)
      : operation(o.operation),
        vectoridx(o.vectoridx),
        create_size(o.create_size) {
  vec.reserve(o.vec.size());
  for (const auto &vec_ : o.vec) { vec.emplace_back((vec_) ? new HeapinfoT(*vec_) : nullptr); }
}

inline PlayerT &PlayerT::operator=(PlayerT o) FLATBUFFERS_NOEXCEPT {
  std::swap(operation, o.operation);
  std::swap(vectoridx, o.vectoridx);
  std::swap(create_size, o.create_size);
  std::swap(vec, o.vec);
  return *this;
}

inline PlayerT *Player::UnPack(const ::flatbuffers::resolver_function_t *_resolver) const {
  auto _o = std::unique_ptr<PlayerT>(new PlayerT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Player::UnPackTo(PlayerT *_o, const ::flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = operation(); if (_e) _o->operation = _e->str(); }
  { auto _e = vectoridx(); _o->vectoridx = _e; }
  { auto _e = create_size(); _o->create_size = _e; }
  { auto _e = vec(); if (_e) { _o->vec.resize(_e->size()); for (::flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { if(_o->vec[_i]) { _e->Get(_i)->UnPackTo(_o->vec[_i].get(), _resolver); } else { _o->vec[_i] = std::unique_ptr<HeapinfoT>(_e->Get(_i)->UnPack(_resolver)); }; } } else { _o->vec.resize(0); } }
}

inline ::flatbuffers::Offset<Player> Player::Pack(::flatbuffers::FlatBufferBuilder &_fbb, const PlayerT* _o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  return CreatePlayer(_fbb, _o, _rehasher);
}

inline ::flatbuffers::Offset<Player> CreatePlayer(::flatbuffers::FlatBufferBuilder &_fbb, const PlayerT *_o, const ::flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { ::flatbuffers::FlatBufferBuilder *__fbb; const PlayerT* __o; const ::flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _operation = _o->operation.empty() ? 0 : _fbb.CreateString(_o->operation);
  auto _vectoridx = _o->vectoridx;
  auto _create_size = _o->create_size;
  auto _vec = _o->vec.size() ? _fbb.CreateVector<::flatbuffers::Offset<Heapinfo>> (_o->vec.size(), [](size_t i, _VectorArgs *__va) { return CreateHeapinfo(*__va->__fbb, __va->__o->vec[i].get(), __va->__rehasher); }, &_va ) : 0;
  return CreatePlayer(
      _fbb,
      _operation,
      _vectoridx,
      _create_size,
      _vec);
}

inline const Player *GetPlayer(const void *buf) {
  return ::flatbuffers::GetRoot<Player>(buf);
}

inline const Player *GetSizePrefixedPlayer(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Player>(buf);
}

inline bool VerifyPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Player>(nullptr);
}

inline bool VerifySizePrefixedPlayerBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Player>(nullptr);
}

inline void FinishPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Player> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPlayerBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Player> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<PlayerT> UnPackPlayer(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlayerT>(GetPlayer(buf)->UnPack(res));
}

inline std::unique_ptr<PlayerT> UnPackSizePrefixedPlayer(
    const void *buf,
    const ::flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<PlayerT>(GetSizePrefixedPlayer(buf)->UnPack(res));
}

#endif  // FLATBUFFERS_GENERATED_HEAPS_H_
